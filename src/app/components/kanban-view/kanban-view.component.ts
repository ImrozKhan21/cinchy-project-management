import {AfterViewInit, Component, ElementRef, HostListener, OnInit} from '@angular/core';
import {AppStateService} from "../../services/app-state.service";
import {UtilService} from "../../services/util.service";
import {Observable} from "rxjs";
import {IProjectDetails, IStatus} from "../../models/common.model";
import {DataTransformerService} from "../../services/data-transformer.service";
import {FilterDataService} from "../../services/filter-data.service";
import {KanbanEditorService} from "../../services/kanban-editor.service";
import {Clipboard} from '@angular/cdk/clipboard';
import {MessageService} from "primeng/api";

declare let webix: any;
declare let kanban: any;
declare let base_task_set: any;

@Component({
  selector: 'app-kanban-view',
  templateUrl: './kanban-view.component.html',
  styleUrls: ['./kanban-view.component.scss']
})
export class KanbanViewComponent implements OnInit, AfterViewInit {
  @HostListener('window:resize', ['$event'])
  onResize(event: any) {
    const kanban: any = $$("kanban");
    kanban.config.width = event.target.innerWidth;
    kanban.resize();
  }

  kanbanData: any;
  kanbanView: any;
  showSpinner$: Observable<boolean>;
  filterValues: any;
  dontMakeCallToUpdate: boolean = false;
  isDragged: boolean = false;
  itemsAfterInsert: any = [];
  inProgress: boolean;
  selectedProjects: IProjectDetails[];
  formKeys: string[];

  constructor(private element: ElementRef, private appStateService: AppStateService,
              private utilService: UtilService, private dataTransformerService: DataTransformerService,
              private filterDataService: FilterDataService, private kanbanEditorService: KanbanEditorService,
              private clipboard: Clipboard, private messageService: MessageService) {
  }

  ngOnInit() {
    this.showSpinner$ = this.appStateService.getSpinnerState();
    this.kanbanData = this.dataTransformerService.transformToKanbanData(this.appStateService.activities);
    this.appStateService.getRefreshViewState().subscribe(({refresh, activity}) => {
      if (refresh) {
        this.dontMakeCallToUpdate = true;
        const kanban: any = $$("kanban");
        // @ts-ignore since after insert we are not reloading kanban, so we need to keep track of items and id generated by Kanban
        this.itemsAfterInsert = $$("kanban").serialize();
        kanban.updateItem(activity.id, activity);
        this.dontMakeCallToUpdate = false;
        //    this.initKanban();
      }
    });
  }

  ngAfterViewInit(): void {
    this.appStateService.getGlobalFilter().subscribe((filterValues) => {
      this.setDetailsAndRender(filterValues);
    });
  }

  setDetailsAndRender(filterValues: any) {
    this.selectedProjects = filterValues?.selectedProjects;
    this.kanbanData = this.dataTransformerService.transformToKanbanData(this.appStateService.activities, this.selectedProjects);
    const {allTasks, projects} = this.kanbanData;
    this.filterValues = filterValues;
    let updatedTasks = this.filterDataService.getUpdatedTasks(allTasks.concat(projects), filterValues, true);
    this.kanbanData = {...this.kanbanData, mappedTasks: updatedTasks};
    this.kanbanView?.destructor();
    this.initKanban();
  }

  customTemplating() {
    webix.type(webix.ui.kanbanlist, {
      name: "cards",
      templateBody: function (obj: any) {
        const defaultHtml = `<span>${obj.text}</span>`;
        return `${defaultHtml}`;
      },
      templateFooter: (obj: any, common: any, kanban: any) => {
        return this.kanbanEditorService.getTemplateFooter(obj, common, kanban);
      }
    });
  }

  initKanban(): void {
    const {mappedStatuses, mappedTasks, userSet, allProjects, tagsList, mileStoneWorkItems} = this.kanbanData;
    if (webix.env.mobile) webix.ui.fullScreen();
    const projectsForSelection = allProjects.map((project: IProjectDetails) => ({
      id: project.id,
      value: project.project_name
    }));

    webix.CustomScroll.init();

    // Custom footer in cards (tags and icons)
    this.customTemplating();
    this.kanbanView = webix.ui({
      container: document.getElementById("kanban-parent"),
      responsive: "true",
      rows: [
        {
          container: document.getElementById("kanban-add-view"),
          responsive: "true",
          css: "toolbar",
          borderless: true,
          paddingY: 7,
          paddingX: 10,
          margin: 7,
          cols: [
            {view: "label", label: "Board"},
            {
              view: "button", type: "form", label: "Add New Work", width: 150, click: () => {
                const kanbanView = $$("kanban") as any;
                kanbanView.showEditor();
                const editorForm: any = kanbanView.getEditor();
                const formValues = editorForm.getValues();
                const formTitleElement: any = $$('formTitle');
                formTitleElement.setHTML('');
                const selectedProject = this.filterValues?.selectedProjects;
                if (selectedProject?.length === 1) {
                  const updatedFormValues = {
                    ...formValues,
                    parent_project: `project-${selectedProject[0].project_id}`,
                    project_name: selectedProject[0].project_name,
                    parent_id: selectedProject[0].project_id,
                    description: ''
                  };
                  editorForm.setValues(updatedFormValues);
                }
              }
            }
          ]
        },
        {
          view: "kanban",
          id: "kanban",
          responsive: "true",
          container: document.getElementById("kanban-view"),
          ready: () => {
            this.changeEditorButtonToIcon($$("kanban"), "Remove", 'Delete', "wxi-sync");
          },
          cols: mappedStatuses,
          data: mappedTasks,
          userList: true,
          users: userSet,
          tags: tagsList,
          projects: projectsForSelection,
          editor: this.kanbanEditorService.getKanbanEditor(this.kanbanData, projectsForSelection, this.selectedProjects, webix),
          cardActions: [
            //default
            "edit",
            // custom,
            'View Record',
            'View Project',
            'Copy Item URL'
          ],
          on: {
            onBeforeCardAction: (action: any, id: any) => {
              const kanbanView: any = $$("kanban");
              const itemData = kanbanView.getItem(id);
              if (action === "View Record") {
                window.open(itemData.work_url, '_blank');
              }

              if (action === "View Project") {
                window.open(itemData.project_url, '_blank');
              }

              if (action === "Copy Item URL") {
                const urlToShare = `${window.location.href}&activityId=${itemData.activity_id}`
                this.clipboard.copy(urlToShare);
                this.messageService.add({severity: 'success', summary: '', detail: 'Item URL copied'});
                // window.open(itemData.project_url, '_blank');
              }
            },
            onListItemClick: (id: any, ev: any) => {
            },
            onListItemDblClick: function (id: any, e: any, node: any, list: any) {
              const kanbanView: any = $$("kanban");
              const editorForm: any = kanbanView.getEditor();
              const formValues = kanbanView.getItem(id);
              const formTitle = formValues.text ? `Created By ${formValues.createdBy}` : ``;
              const formTitleElement: any = $$('formTitle');
              formTitleElement.setHTML(formTitle);
              kanbanView.showEditor();
              const projectField = $$('parent_project');
              !formValues.parent ? projectField.enable() : projectField.disable();
              editorForm.setValues(formValues);
            },
            onDataUpdate: (v: any, itemData: any) => {
              if (!this.dontMakeCallToUpdate) {
                this.utilService.updateActivityWithNewValues(itemData, 'UPDATE', 'kanban', this.isDragged);
              }
            },
            onBeforeAdd: (obj: any, list: any, e: any) => {
              const itemToUpdate = {...list};
              if (!itemToUpdate.parent_id) {
                itemToUpdate.parent_id = itemToUpdate.parent_project ? parseInt(itemToUpdate.parent_project.split('-')[1]) : null;
                itemToUpdate.description = list.description && list.description !== "undefined" ? list.description : '';
              }
              this.utilService.updateActivityWithNewValues({...itemToUpdate, type: 'task'}, 'INSERT', 'kanban');
            },
            onBeforeEditorShow: () => {
              const kanbanView: any = $$("kanban");
              const editor: any = kanbanView.getEditor();
              const formValues = editorForm.getValues();
              this.formKeys = this.formKeys ? this.formKeys : Object.keys(formValues);
              editor.define("width", 900); // Define the new width
              editor.resize(); // Apply the new size
            },
            onAfterEditorShow: (task: any, i: any) => {
              const kanbanView: any = $$("kanban");
              const editorForm: any = kanbanView.getEditor();
              const formValues = editorForm.getValues();
              const projectField = $$('parent_project');
              // Check if the editor is for a new card
              this.formKeys?.forEach((key: string) => {
                const canEditKey = `can_edit-${key}`;
                if (formValues[canEditKey] === 0) {
                  $$(key)?.disable();
                } else {
                  $$(key)?.enable();
                }
              });
              !formValues.parent ? projectField.enable() : projectField.disable();
            },
            onBeforeEditorAction: (action: any, editor: any, itemData: any) => {
              if (this.inProgress || action === "remove") return true;
              const isValid = editor.getForm().validate();
              if (!isValid) {
                return false;
              }
              const values = editor.getValues({hidden: false});
              const saveBtn = editor.queryView({label: "Save"});
              const defHandler = saveBtn.config.click;
              this.inProgress = true;
              const operation = itemData.activity_id ? "update" : "insert";
              const callToMake = operation === "update" ? this.utilService.updateActivityWithNewValues(itemData, 'UPDATE', 'kanban', this.isDragged)
                : this.utilService.pingCallToCheckSession();
              callToMake.then(() => {
                // prevent duplicate calls to the server
                if (operation === "update") { // as for update we have already made the call
                  webix.dp(this).ignore(() => {
                    // call the default save logic on success
                    defHandler.call(editor);
                  });
                } else {
                  defHandler.call(editor);
                }
                this.inProgress = false;
              }).catch(error => {
                this.inProgress = false;
              });
              return false;
            },
            onBeforeDelete: (id: any) => {
              const activityToDelete = mappedTasks.find((task: any) => task.id === id) || this.itemsAfterInsert?.find((task: any) => task.id === id);
              this.utilService.deleteActivity(activityToDelete.activity_id, 'kanban')
            },
            onListAfterDrop: (kanbanView: any, dragContext: any, e: any, list: any) => {
              this.isDragged = false;
            },
            onListBeforeDrag: (dragContext: any, e: any, kanbanView: any, list: any) => {
              this.isDragged = true;
              const itemId = dragContext.start;
              // Get the actual data of the dropped item
              const itemData = kanbanView.getItem(itemId);
              return itemData['can_edit-status_id'] === 1;
            },
            onListBeforeDragIn: this.utilService.onKanbanBeforeDragIn,
          },
        }
      ],
    });
    // EDITOR EVENTS
    const kanbanView: any = $$("kanban");
    const editorForm: any = kanbanView.getEditor();
    editorForm.attachEvent("onHide", function () {
      editorForm.getForm().clearValidation();
    });
    this.updateStatusColumnExpansion();
  }

  updateStatusColumnExpansion() {
    this.appStateService.allStatuses.forEach((status: IStatus) => {
      const isCollapsed = status.status_collapsed === 'Collapsed';
      if (isCollapsed) {
        const statusColumns: any = $$(`id-${status.name}`).getParentView();
        statusColumns?.collapse();
      }
    });
  }

  changeEditorButtonToIcon(kanban: any, label: string, updatedLabel: string, icon: string) {
    const editor = kanban.getEditor();
    const button = this.getEditorButton(editor, label);
    button.config.label = updatedLabel;
    button.data.label = updatedLabel;
    button.$view.classList = [`${button.$view.classList} webix_danger webix_kanban_danger`];
    // To add another button
    /*const layout = button.getParentView();
    const correctMethod = layout.getParentView;
    layout.getParentView = function(){return null};
    layout.addView({view:"button", label: "Details", click: this.clickDone, width:80, css:"myStyle"})
    layout.getParentView = correctMethod;*/
  }

  getEditorButton(editor: any, label: any) {
    let button;
    const buttons = editor.queryView({
      view: "button"
    }, "all");
    const number = 0;
    for (let i = 0; i < buttons.length; i++) {
      if (buttons[i].config.label == label) {
        button = buttons[i];
        break;
      }
    }
    return button;
  }

  static clickDone() {
  }
}
